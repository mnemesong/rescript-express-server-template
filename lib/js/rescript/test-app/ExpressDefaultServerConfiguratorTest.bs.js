// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var SimpleLogger = require("../src/SimpleLogger.bs.js");
var ExpressServer = require("../src/ExpressServer.bs.js");
var ExpressDefaultServerConfigurator = require("../src/ExpressDefaultServerConfigurator.bs.js");

var ExpressDefaultServerConfigurator$1 = ExpressDefaultServerConfigurator.ExpressDefaultServerConfiguratorFactory(SimpleLogger.SimpleLogger);

function formHtml(method, path) {
  return "\r\n<form action=\"" + path + "\" method=\"" + method + "\">\r\n    <h1>Test " + method + " form</h1>\r\n    <input name=\"textInp\" value=\"\" style=\"display: block;\">\r\n    <textarea name=\"textAr\" style=\"display: block;\"></textarea>\r\n    <input type=\"submit\" style=\"display: block;\">\r\n</form>\r\n";
}

function fileForm(method, path) {
  return "\r\n<form action=\"" + path + "\" method=\"" + method + "\" enctype=\"multipart/form-data\">\r\n    <h1>Test multipart form</h1>\r\n    <input name=\"textInp\" value=\"\" style=\"display: block;\">\r\n    <input type=\"file\" name=\"fileInp\" style=\"display: block;\">\r\n    <input type=\"submit\" style=\"display: block;\">\r\n</form>\r\n";
}

var testButtons = "\r\n<div>\r\n    <button type=\"button\" onclick=\"window.open('/open-file');\">open file</button>\r\n    <button type=\"button\" onclick=\"window.open('/download-file');\">download file</button>\r\n    <button type=\"button\" onclick=\"window.open('/set-session');\">set session</button>\r\n    <button type=\"button\" onclick=\"window.open('/delete-session');\">delete session</button>\r\n</div>\r\n";

var testFilePath = (require('path').resolve(module.path, '..', '..', '..', '..', 'resources', 'test-file.txt'));

function printForms(forms) {
  return "\r\n<div style=\"display:grid; grid-template-columns: " + Belt_Array.map(forms, (function (param) {
                  return "1fr";
                })).join(" ") + ";\">\r\n    " + forms.join("") + "\r\n</div>\r\n";
}

var indexPageHtml = printForms([
      formHtml("get", "/apply-get"),
      formHtml("post", "/apply-post"),
      "\r\n<form action=\"/apply-file\" method=\"" + "post" + "\" enctype=\"multipart/form-data\">\r\n    <h1>Test multipart form</h1>\r\n    <input name=\"textInp\" value=\"\" style=\"display: block;\">\r\n    <input type=\"file\" name=\"fileInp\" style=\"display: block;\">\r\n    <input type=\"submit\" style=\"display: block;\">\r\n</form>\r\n",
      testButtons
    ]);

var parseUnknownAsString = (function(val) {
        return (val && (typeof val === 'string'))
            ? val
            : null;
    });

var parseUnknownObjectProperty = (function(obj, prop, parser) {
        return (obj[prop]) ? parser(obj[prop]) : null;
    });

var parseUnknownAsFile = (function (val) {
        console.log(val);
        return null;
    });

var parseUnknownAsArray = (function(arr, parser) {
        return Array.isArray(arr)
            ? arr.map(parser)
            : null;
    });

function parseFormValues(u) {
  return {
          textInp: parseUnknownObjectProperty(u, "textInp", parseUnknownAsString),
          textAr: parseUnknownObjectProperty(u, "textAr", parseUnknownAsString)
        };
}

var routes = [
  [
    "get",
    "/",
    {
      TAG: /* Default */1,
      _0: (function (param) {
          return {
                  TAG: /* OnlyResponse */0,
                  _0: {
                    TAG: /* Html */0,
                    _0: indexPageHtml
                  }
                };
        })
    }
  ],
  [
    "get",
    "/apply-get",
    {
      TAG: /* Default */1,
      _0: (function (req) {
          var reqVals = parseFormValues(req.queryParams);
          var result = JSON.stringify(reqVals);
          if (result !== undefined) {
            return {
                    TAG: /* OnlyResponse */0,
                    _0: {
                      TAG: /* Json */1,
                      _0: result
                    }
                  };
          } else {
            return {
                    TAG: /* OnlyResponse */0,
                    _0: {
                      TAG: /* Json */1,
                      _0: "{}"
                    }
                  };
          }
        })
    }
  ],
  [
    "post",
    "/apply-post",
    {
      TAG: /* Default */1,
      _0: (function (req) {
          var reqVals = parseFormValues(req.bodyData);
          var result = JSON.stringify(reqVals);
          if (result !== undefined) {
            return {
                    TAG: /* OnlyResponse */0,
                    _0: {
                      TAG: /* Json */1,
                      _0: result
                    }
                  };
          } else {
            return {
                    TAG: /* OnlyResponse */0,
                    _0: {
                      TAG: /* Json */1,
                      _0: "{}"
                    }
                  };
          }
        })
    }
  ],
  [
    "post",
    "/apply-file",
    {
      TAG: /* Multipart */0,
      _0: (function (req) {
          var reqVals = {
            textInp: parseUnknownObjectProperty(req.bodyData, "textInp", parseUnknownAsString),
            fileInp: parseUnknownObjectProperty(req.files, "fileInp", (function (a) {
                    return parseUnknownAsArray(a, (function (u) {
                                  return parseUnknownObjectProperty(u, "originalname", parseUnknownAsString);
                                }));
                  }))
          };
          var result = JSON.stringify(reqVals);
          if (result !== undefined) {
            return {
                    TAG: /* OnlyResponse */0,
                    _0: {
                      TAG: /* Json */1,
                      _0: result
                    }
                  };
          } else {
            return {
                    TAG: /* OnlyResponse */0,
                    _0: {
                      TAG: /* Json */1,
                      _0: "{}"
                    }
                  };
          }
        }),
      _1: /* Files */{
        _0: "/uploads",
        _1: [[
            "fileInp",
            1
          ]]
      }
    }
  ],
  [
    "get",
    "/open-file",
    {
      TAG: /* Default */1,
      _0: (function (param) {
          return {
                  TAG: /* OnlyResponse */0,
                  _0: {
                    TAG: /* OpenFile */2,
                    _0: testFilePath
                  }
                };
        })
    }
  ],
  [
    "get",
    "/download-file",
    {
      TAG: /* Default */1,
      _0: (function (param) {
          return {
                  TAG: /* OnlyResponse */0,
                  _0: {
                    TAG: /* DownloadFile */3,
                    _0: testFilePath
                  }
                };
        })
    }
  ],
  [
    "get",
    "/show-session",
    {
      TAG: /* Default */1,
      _0: (function (req) {
          var sessionVal = parseUnknownObjectProperty(req.session, "sessionVal", parseUnknownAsString);
          var printVal = sessionVal !== undefined ? sessionVal : "";
          return {
                  TAG: /* OnlyResponse */0,
                  _0: {
                    TAG: /* Html */0,
                    _0: "Session-val: " + printVal
                  }
                };
        })
    }
  ],
  [
    "get",
    "/set-session",
    {
      TAG: /* Default */1,
      _0: (function (param) {
          return {
                  TAG: /* ResponseWithEffects */1,
                  _0: {
                    TAG: /* Redirect */4,
                    _0: "/show-session",
                    _1: 303
                  },
                  _1: [/* SetSessionVal */{
                      _0: "sessionVal",
                      _1: "11"
                    }]
                };
        })
    }
  ],
  [
    "get",
    "/delete-session",
    {
      TAG: /* Default */1,
      _0: (function (param) {
          return {
                  TAG: /* ResponseWithEffects */1,
                  _0: {
                    TAG: /* Redirect */4,
                    _0: "/show-session",
                    _1: 303
                  },
                  _1: [/* DestroySession */0]
                };
        })
    }
  ]
];

var serverConfig = Curry._3(ExpressDefaultServerConfigurator$1.buildConfig, routes, 80, (function (param) {
        console.log("Server had been started");
      }));

var ExpressServerTest2 = ExpressServer.ExpressServerFactory(SimpleLogger.SimpleLogger);

Curry._1(ExpressServerTest2.run, serverConfig);

exports.ExpressDefaultServerConfigurator = ExpressDefaultServerConfigurator$1;
exports.formHtml = formHtml;
exports.fileForm = fileForm;
exports.testButtons = testButtons;
exports.testFilePath = testFilePath;
exports.printForms = printForms;
exports.indexPageHtml = indexPageHtml;
exports.parseUnknownAsString = parseUnknownAsString;
exports.parseUnknownObjectProperty = parseUnknownObjectProperty;
exports.parseUnknownAsFile = parseUnknownAsFile;
exports.parseUnknownAsArray = parseUnknownAsArray;
exports.parseFormValues = parseFormValues;
exports.routes = routes;
exports.serverConfig = serverConfig;
exports.ExpressServerTest2 = ExpressServerTest2;
/* ExpressDefaultServerConfigurator Not a pure module */
