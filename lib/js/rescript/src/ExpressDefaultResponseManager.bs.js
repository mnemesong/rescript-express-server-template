// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");

function ExpressDefaultResponseManagerFactory(Logger) {
  var initMiddlewares = function (param) {
    
  };
  var handleEffect = function (param, param$1) {
    
  };
  var handleHtmlResp = (function(res, html) {
            res.setHeader('content-type', 'text/html');
            res.send(html);
        });
  var handleJsonResp = (function(res, json) {
            res.setHeader('content-type', 'application/json');
            res.send(json);
        });
  var handleOpenFileResp = (function(res, filePath) {
            res.sendFile(filePath);
        });
  var handleDownloadFileResp = (function(res, filePath) {
            res.download(filePath);
        });
  var hanleRedirectResp = (function(res, redirectPath, redirectStatus) {
            res.redirect(redirectStatus, redirectPath);
        });
  var handleErrorResp = (function(res, msg, status) {
            res.status(status).send(msg);
        });
  var handleResponse = function (res, response) {
    switch (response.TAG | 0) {
      case /* Html */0 :
          return handleHtmlResp(res, response._0);
      case /* Json */1 :
          return handleJsonResp(res, response._0);
      case /* OpenFile */2 :
          return handleOpenFileResp(res, response._0);
      case /* DownloadFile */3 :
          return handleDownloadFileResp(res, response._0);
      case /* Redirect */4 :
          return hanleRedirectResp(res, response._0, response._1);
      case /* Error */5 :
          return handleErrorResp(res, response._0, response._1);
      
    }
  };
  var handleInternalError = function (res, err) {
    Curry._1(Logger.logError, err);
    handleErrorResp(res, "Internal error", 500);
  };
  return {
          initMiddlewares: initMiddlewares,
          handleEffect: handleEffect,
          handleResponse: handleResponse,
          handleInternalError: handleInternalError
        };
}

exports.ExpressDefaultResponseManagerFactory = ExpressDefaultResponseManagerFactory;
/* No side effect */
