// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function ExpressDefaultAuthHandlerFactory(UserIdentityManager, ExpressAuthResponseManager, ExpressAuthRequestInteractor) {
  var handleUserResponse = function (userResp) {
    return Belt_Array.reduce(userResp._1, userResp._0, (function (r, ef) {
                  return Curry._2(ExpressAuthResponseManager.applyResponseEffect, r, ef);
                }));
  };
  var any = function (handler, req) {
    var user = Curry._1(ExpressAuthRequestInteractor.pullUserFromRequest, req);
    return handleUserResponse(Curry._2(handler, req, user));
  };
  var onlyPermissions = function (handler, permissions, denyStrategy, req) {
    var maybeUser = Belt_Option.flatMap(Curry._1(ExpressAuthRequestInteractor.pullUserFromRequest, req), (function (u) {
            if (Belt_Array.reduce(permissions, false, (function (isHasPermission, p) {
                      return isHasPermission ? true : Curry._2(UserIdentityManager.isHasPermission, u, p);
                    }))) {
              return Caml_option.some(u);
            }
            
          }));
    if (maybeUser !== undefined) {
      return handleUserResponse(Curry._2(handler, req, Caml_option.valFromOption(maybeUser)));
    } else {
      return Curry._1(ExpressAuthResponseManager.handleDenyStrategy, denyStrategy);
    }
  };
  var anyRegistered = function (handler, denyStrategy, req) {
    var maybeUser = Curry._1(ExpressAuthRequestInteractor.pullUserFromRequest, req);
    if (maybeUser !== undefined) {
      return handleUserResponse(Curry._2(handler, req, Caml_option.valFromOption(maybeUser)));
    } else {
      return Curry._1(ExpressAuthResponseManager.handleDenyStrategy, denyStrategy);
    }
  };
  var onlyGuest = function (handler, denyStrategy, req) {
    var maybeUser = Curry._1(ExpressAuthRequestInteractor.pullUserFromRequest, req);
    if (maybeUser !== undefined) {
      return Curry._1(ExpressAuthResponseManager.handleDenyStrategy, denyStrategy);
    } else {
      return handleUserResponse(Curry._1(handler, req));
    }
  };
  return {
          any: any,
          onlyPermissions: onlyPermissions,
          anyRegistered: anyRegistered,
          onlyGuest: onlyGuest
        };
}

exports.ExpressDefaultAuthHandlerFactory = ExpressDefaultAuthHandlerFactory;
/* No side effect */
