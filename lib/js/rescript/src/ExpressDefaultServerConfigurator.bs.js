// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

function ExpressDefaultServerConfiguratorFactory(Logger, ResponseManager, RequestManager) {
  var route = function (routeType, path, handling) {
    return /* Route */{
            _0: routeType,
            _1: path,
            _2: handling
          };
  };
  var initMiddlewares = function (app) {
    Curry._1(RequestManager.initMiddlewares, app);
  };
  var buildConfig = function (routes, port, onInit) {
    var routeHandlers = Belt_Array.map(routes, (function (r) {
            var requestHandling = r._2;
            var handlingFunc = function (req, res) {
              Curry._2(Logger.handleResultError, Curry._1(Logger.catchUnknown, (function (param) {
                          var result = Curry._3(RequestManager.handleRequest, requestHandling, req, res);
                          if (result.TAG === /* OnlyResponse */0) {
                            return Curry._2(ResponseManager.handleResponse, res, result._0);
                          }
                          Belt_Array.forEach(result._1, (function (e) {
                                  if (e.TAG === /* RequestEffect */0) {
                                    return Curry._3(RequestManager.handleEffect, req, res, e._0);
                                  } else {
                                    return Curry._3(ResponseManager.handleEffect, req, res, e._0);
                                  }
                                }));
                          Curry._2(ResponseManager.handleResponse, res, result._0);
                        })), (function (err) {
                      Curry._1(Logger.logError, err);
                      Curry._1(ResponseManager.handleInternalError, res);
                    }));
            };
            var middlewares = Curry._1(RequestManager.produceMiddlewares, requestHandling);
            return {
                    path: r._1,
                    routeType: r._0,
                    middlewares: middlewares,
                    handler: handlingFunc
                  };
          }));
    return {
            handlers: routeHandlers,
            appMwInits: [initMiddlewares],
            port: port,
            onInit: onInit
          };
  };
  return {
          buildConfig: buildConfig,
          route: route
        };
}

exports.ExpressDefaultServerConfiguratorFactory = ExpressDefaultServerConfiguratorFactory;
/* No side effect */
