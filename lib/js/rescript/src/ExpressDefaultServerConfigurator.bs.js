// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

function ExpressDefaultServerConfiguratorFactory(Logger, RequestManager) {
  var route = function (routeType, path, handling) {
    return /* Route */{
            _0: routeType,
            _1: path,
            _2: handling
          };
  };
  var handleHtmlResp = (function(res, html) {
            res.setHeader('content-type', 'text/html');
            res.send(html);
        });
  var handleJsonResp = (function(res, json) {
            res.setHeader('content-type', 'application/json');
            res.send(json);
        });
  var handleOpenFileResp = (function(res, filePath) {
            res.sendFile(filePath);
        });
  var handleDownloadFileResp = (function(res, filePath) {
            res.download(filePath);
        });
  var hanleRedirectResp = (function(res, redirectPath, redirectStatus) {
            res.redirect(redirectStatus, redirectPath);
        });
  var handleErrorResp = (function(res, msg, status) {
            res.status(status).send(msg);
        });
  var handleRespResult = function (res, response) {
    switch (response.TAG | 0) {
      case /* Html */0 :
          return handleHtmlResp(res, response._0);
      case /* Json */1 :
          return handleJsonResp(res, response._0);
      case /* OpenFile */2 :
          return handleOpenFileResp(res, response._0);
      case /* DownloadFile */3 :
          return handleDownloadFileResp(res, response._0);
      case /* Redirect */4 :
          return hanleRedirectResp(res, response._0, response._1);
      case /* Error */5 :
          return handleErrorResp(res, response._0, response._1);
      
    }
  };
  var initMiddlewares = function (app) {
    Curry._1(RequestManager.initMiddlewares, app);
  };
  var buildConfig = function (routes, port, onInit) {
    var routeHandlers = Belt_Array.map(routes, (function (r) {
            var requestHandling = r._2;
            var handlingFunc = function (req, res) {
              Curry._2(Logger.handleResultError, Curry._1(Logger.catchUnknown, (function (param) {
                          var result = Curry._3(RequestManager.handleRequest, requestHandling, req, res);
                          if (result.TAG === /* OnlyResponse */0) {
                            return handleRespResult(res, result._0);
                          }
                          Belt_Array.forEach(result._1, (function (e) {
                                  Curry._3(RequestManager.handleEffect, e, req, res);
                                }));
                          handleRespResult(res, result._0);
                        })), (function (err) {
                      Curry._1(Logger.logError, err);
                      handleErrorResp(res, "Internal error", 500);
                    }));
            };
            var middlewares = Curry._1(RequestManager.produceMiddlewares, requestHandling);
            return {
                    path: r._1,
                    routeType: r._0,
                    middlewares: middlewares,
                    handler: handlingFunc
                  };
          }));
    return {
            handlers: routeHandlers,
            appMwInits: [initMiddlewares],
            port: port,
            onInit: onInit
          };
  };
  return {
          buildConfig: buildConfig,
          route: route
        };
}

exports.ExpressDefaultServerConfiguratorFactory = ExpressDefaultServerConfiguratorFactory;
/* No side effect */
