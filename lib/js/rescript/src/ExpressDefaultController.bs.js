// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function ExpressDefaultControllerFactory(Logger, DefaultPagesStrategy, RequestResponseManager, RbacManager) {
  var actionsCollection = {
    contents: []
  };
  var getHandlerType = function (a) {
    return a.t;
  };
  var isPermissionsIntersect = function (pa1, pa2) {
    return Belt_Array.some(pa1, (function (p1) {
                  return Belt_Array.reduce(pa2, false, (function (r, p2) {
                                if (r) {
                                  return true;
                                } else {
                                  return Curry._2(RbacManager.isPermissionsEq, p1, p2);
                                }
                              }));
                }));
  };
  var getHandlerFunction = function (a, req, res) {
    try {
      var result = Belt_Result.flatMap(Belt_Result.map(Belt_Result.flatMap(Curry._1(RequestResponseManager.parseRequest, req), (function (r) {
                      var permStrat = a.permStrat;
                      var user = Curry._1(RbacManager.getUser, r);
                      if (typeof permStrat === "number") {
                        if (permStrat === /* Any */0 || user === undefined) {
                          return {
                                  TAG: /* Ok */0,
                                  _0: r
                                };
                        } else {
                          return {
                                  TAG: /* Error */1,
                                  _0: Logger.userIsNotGuestError
                                };
                        }
                      }
                      if (permStrat.TAG === /* RegisteredExclude */0) {
                        if (user === undefined) {
                          return {
                                  TAG: /* Error */1,
                                  _0: Logger.userIsNotLoggedInError
                                };
                        }
                        var isIntersects = isPermissionsIntersect(Curry._1(RbacManager.getPermissions, Caml_option.valFromOption(user)), permStrat._0);
                        if (isIntersects === true) {
                          return {
                                  TAG: /* Error */1,
                                  _0: Logger.accessDeniedForUserError
                                };
                        } else {
                          return {
                                  TAG: /* Ok */0,
                                  _0: r
                                };
                        }
                      }
                      if (user === undefined) {
                        return {
                                TAG: /* Error */1,
                                _0: Logger.userIsNotLoggedInError
                              };
                      }
                      var isIntersects$1 = isPermissionsIntersect(Curry._1(RbacManager.getPermissions, Caml_option.valFromOption(user)), permStrat._0);
                      if (isIntersects$1 === true) {
                        return {
                                TAG: /* Ok */0,
                                _0: r
                              };
                      } else {
                        return {
                                TAG: /* Error */1,
                                _0: Logger.accessDeniedForUserError
                              };
                      }
                    })), (function (r) {
                  return Curry._1(a.func, r);
                })), (function (hr) {
              var applyEffectsResult = Curry._2(RequestResponseManager.applyResponseEffects, res, hr.effects);
              if (applyEffectsResult.TAG === /* Ok */0) {
                return {
                        TAG: /* Ok */0,
                        _0: hr.resp
                      };
              } else {
                return {
                        TAG: /* Error */1,
                        _0: applyEffectsResult._0
                      };
              }
            }));
      if (result.TAG === /* Ok */0) {
        return result._0;
      } else {
        return Curry._1(DefaultPagesStrategy.errorHandlingStrategy, result._0);
      }
    }
    catch (raw_obj){
      var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
      if (obj.RE_EXN_ID === Js_exn.$$Error) {
        var err = Curry._1(Logger.wrap, obj._1);
        Curry._2(Logger.log, Logger.err, err);
        return Curry._1(DefaultPagesStrategy.errorHandlingStrategy, err);
      }
      var err$1 = Curry._1(Logger.getUnknownErrorInRoute, a.path);
      Curry._2(Logger.log, Logger.err, err$1);
      return Curry._1(DefaultPagesStrategy.errorHandlingStrategy, err$1);
    }
  };
  var getPath = function (a) {
    return a.path;
  };
  var initExpressApp = function (u) {
    return Curry._1(DefaultPagesStrategy.initExpressApp, u);
  };
  var getMiddlewares = function (a) {
    return a.middlewares;
  };
  var getAllActions = function (param) {
    return actionsCollection.contents;
  };
  return {
          getAllActions: getAllActions,
          getHandlerType: getHandlerType,
          getHandlerFunction: getHandlerFunction,
          getPath: getPath,
          initExpressApp: initExpressApp,
          getMiddlewares: getMiddlewares
        };
}

exports.ExpressDefaultControllerFactory = ExpressDefaultControllerFactory;
/* No side effect */
