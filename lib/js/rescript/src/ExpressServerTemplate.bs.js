// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

const express = require("express")
const app = express();
const multer = require("multer")
app.use(express.urlencoded())
app.use(express.json())
;

function ExpressServerTemplate(Logger, ControllerFunctor) {
  var Controller = Curry._1(ControllerFunctor, Logger);
  var initExpressApp = function (app) {
    return Belt_Result.flatMap(Curry._1(Logger.initExpressApp, app), (function (param) {
                  return Curry._1(Controller.initExpressApp, app);
                }));
  };
  var appUnit = app;
  var registerActions = function (param) {
    var result = Belt_Array.reduce(Belt_Array.map(Curry._1(Controller.getAllActions, undefined), (function (a) {
                var handlerType = Curry._1(Controller.getHandlerType, a);
                var handlerFunc = Curry._1(Controller.getHandlerFunction, a);
                var handlerMiddlewares = Curry._1(Controller.getMiddlewares, a);
                var handlerPath = Curry._1(Controller.getPath, a);
                if (typeof handlerType === "number") {
                  try {
                    var res = (function(path, middlewares, handlerFunc) {
                const funParams = [path]
                    .concat(middlewares)
                    .concat([handlerFunc]);
                app.get(...funParams);
            });
                    res(handlerPath, handlerMiddlewares, handlerFunc);
                    return {
                            TAG: /* Ok */0,
                            _0: undefined
                          };
                  }
                  catch (raw_obj){
                    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
                    if (obj.RE_EXN_ID === Js_exn.$$Error) {
                      return {
                              TAG: /* Error */1,
                              _0: Curry._1(Logger.wrap, obj._1)
                            };
                    }
                    throw obj;
                  }
                } else if (handlerType.TAG === /* Post */0) {
                  var isMultipart = handlerType._0;
                  try {
                    var isMulti = isMultipart ? false : true;
                    var res$1 = (function(path, middlewares, handlerFunc, isMulti) {
                const middlewares2 = isMulti
                    ? [multer().none()].concat(middlewares)
                    : middlewares
                const funParams = [path]
                    .concat(middlewares2)
                    .concat([handlerFunc]);
                app.post(...funParams);
            });
                    res$1(handlerPath, handlerMiddlewares, handlerFunc, isMulti);
                    return {
                            TAG: /* Ok */0,
                            _0: undefined
                          };
                  }
                  catch (raw_obj$1){
                    var obj$1 = Caml_js_exceptions.internalToOCamlException(raw_obj$1);
                    if (obj$1.RE_EXN_ID === Js_exn.$$Error) {
                      return {
                              TAG: /* Error */1,
                              _0: Curry._1(Logger.wrap, obj$1._1)
                            };
                    }
                    throw obj$1;
                  }
                } else {
                  var isMultipart$1 = handlerType._1;
                  var routeType = handlerType._0;
                  try {
                    var isMulti$1 = isMultipart$1 ? false : true;
                    var res$2 = (function(path, middlewares, handlerFunc, isMulti, routeType) {
                const middlewares2 = isMulti
                    ? [multer().none()].concat(middlewares)
                    : middlewares
                const funParams = [path]
                    .concat(middlewares2)
                    .concat([handlerFunc]);
                app[routeType](...funParams);
            });
                    res$2(handlerPath, handlerMiddlewares, handlerFunc, isMulti$1, routeType);
                    return {
                            TAG: /* Ok */0,
                            _0: undefined
                          };
                  }
                  catch (raw_obj$2){
                    var obj$2 = Caml_js_exceptions.internalToOCamlException(raw_obj$2);
                    if (obj$2.RE_EXN_ID === Js_exn.$$Error) {
                      return {
                              TAG: /* Error */1,
                              _0: Curry._1(Logger.wrap, obj$2._1)
                            };
                    }
                    throw obj$2;
                  }
                }
              })), undefined, (function (err, res) {
            if (res.TAG === /* Ok */0) {
              return err;
            } else if (err !== undefined) {
              return Caml_option.some(Caml_option.valFromOption(err));
            } else {
              return Caml_option.some(res._0);
            }
          }));
    if (result !== undefined) {
      return {
              TAG: /* Error */1,
              _0: Caml_option.valFromOption(result)
            };
    } else {
      return {
              TAG: /* Ok */0,
              _0: undefined
            };
    }
  };
  var run = function (param) {
    return Belt_Result.flatMap(initExpressApp(appUnit), registerActions);
  };
  return {
          run: run
        };
}

exports.ExpressServerTemplate = ExpressServerTemplate;
/*  Not a pure module */
