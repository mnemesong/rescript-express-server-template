// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

const express = require("express");

const session = require('express-session');
;

function setSessionValue(k, val) {
  var convertVal = (function(a) {
    return a
  });
  return /* SetSessionValue */{
          _0: k,
          _1: convertVal(val)
        };
}

function getSessionConfig(param) {
  return /* SessionConfig */{
          _0: "dksand9u7sa9db9",
          _1: []
        };
}

var DefaultConfigurator = {
  getSessionConfig: getSessionConfig
};

function Make(OldHandler, SessionConfigurator) {
  var wrapStepReq = function (oldReq) {
    var match = Curry._1(OldHandler.primalReq, oldReq);
    var parse = (function(req) {
        const result = {};
        if(req.session) {
          Object.keys(req.session)
            .forEach(k => {result[k] = req.session[k]});
        }
        return req.session ? JSON.parse(JSON.stringify(result)) : {};
      });
    return /* SessionReq */{
            _0: oldReq,
            _1: parse(match[0])
          };
  };
  var getOldReq = function (newReq) {
    return newReq._0;
  };
  var applyStepRes = function (newReq, newRes) {
    var match = Curry._1(OldHandler.primalReq, getOldReq(newReq));
    var request = match[0];
    var applySetSessionVal = (function(req, k, v) {
      req.session[k] = v;
    });
    var applyDestroySession = (function(req) {
      req.session.destroy();
    });
    Belt_Array.forEach(newRes._1, (function (e) {
            if (e) {
              return applySetSessionVal(request, e._0, e._1);
            } else {
              return applyDestroySession(request);
            }
          }));
    return newRes._0;
  };
  var prepareSessionConfig = function (param) {
    var match = Curry._1(SessionConfigurator.getSessionConfig, undefined);
    var conf = {};
    var setSecret = (function(s) {
      conf.secret = s;
    });
    setSecret(match._0);
    var setSessionResave = (function(s) {
      conf.resave = s
    });
    var setSessionSaveUninitialized = (function(s) {
      conf.saveUninitialized = s;
    });
    var setSessionCookie = (function(s, ma) {
      const cookiePar = {secure: s};
      if(ma) { cookiePar.maxAge = ma; }
      conf.cookie = cookiePar;
    });
    Belt_Array.forEach(match._1, (function (p) {
            switch (p.TAG | 0) {
              case /* SessionResave */0 :
                  return setSessionResave(p._0);
              case /* SessionSaveUnitialized */1 :
                  return setSessionSaveUninitialized(p._0);
              case /* Cookie */2 :
                  return setSessionCookie(p._0, p._1);
              
            }
          }));
    return conf;
  };
  var getSessionMw = (function (sc) {
    return session(sc);
  });
  var middlewares = [getSessionMw(prepareSessionConfig(undefined))];
  return {
          wrapStepReq: wrapStepReq,
          getOldReq: getOldReq,
          applyStepRes: applyStepRes,
          middlewares: middlewares
        };
}

exports.setSessionValue = setSessionValue;
exports.DefaultConfigurator = DefaultConfigurator;
exports.Make = Make;
/*  Not a pure module */
