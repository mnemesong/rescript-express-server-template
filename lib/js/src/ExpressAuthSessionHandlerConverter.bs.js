// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

const express = require("express");
const session = require('express-session');
;

function getSessionConfig(param) {
  return /* SessionConfig */{
          _0: "dksand9u7sa9db9",
          _1: []
        };
}

var DefaultConfigurator = {
  getSessionConfig: getSessionConfig
};

function Make(OldHandler, UserManager, SessionConfigurator) {
  var wrapStepReq = function (oldReq) {
    var match = Curry._1(OldHandler.primalReq, oldReq);
    var parse = (function(req) {
                const result = {};
                if(req.session && req.session.userCheckAuthData) {
                    return JSON.parse(JSON.stringify(
                        req.session.userCheckAuthData));
                }
                return undefined;
            });
    var maybeUser = Belt_Option.flatMap(parse(match[0]), (function (ucad) {
            return Curry._1(UserManager.checkAuthData, ucad);
          }));
    return /* AuthSessReq */{
            _0: oldReq,
            _1: maybeUser
          };
  };
  var getOldReq = function (newReq) {
    return newReq._0;
  };
  var applyStepRes = function (newReq, newRes) {
    var match = Curry._1(OldHandler.primalReq, getOldReq(newReq));
    var request = match[0];
    var applyLoginAuthData = (function(req, u) {
            req.session.userCheckAuthData = u;
        });
    var applyLogout = (function(req) {
            delete req.session.userCheckAuthData;
        });
    Belt_Array.forEach(newRes._1, (function (e) {
            if (!e) {
              return applyLogout(request);
            }
            var ucad = Curry._1(UserManager.produceAuthData, e._0);
            applyLoginAuthData(request, ucad);
          }));
    return newRes._0;
  };
  var prepareSessionConfig = function (param) {
    var match = Curry._1(SessionConfigurator.getSessionConfig, undefined);
    var conf = {};
    var setSecret = (function(s) {
            conf.secret = s;
        });
    setSecret(match._0);
    var setSessionResave = (function(s) {
            conf.resave = s
        });
    var setSessionSaveUninitialized = (function(s) {
            conf.saveUninitialized = s;
        });
    var setSessionCookie = (function(s, ma) {
            const cookiePar = {secure: s};
            if(ma) { cookiePar.maxAge = ma; }
            conf.cookie = cookiePar;
        });
    Belt_Array.forEach(match._1, (function (p) {
            switch (p.TAG | 0) {
              case /* SessionResave */0 :
                  return setSessionResave(p._0);
              case /* SessionSaveUnitialized */1 :
                  return setSessionSaveUninitialized(p._0);
              case /* Cookie */2 :
                  return setSessionCookie(p._0, p._1);
              
            }
          }));
    return conf;
  };
  var getSessionMw = (function (sc) {
        return session(sc);
    });
  var middlewares = [getSessionMw(prepareSessionConfig(undefined))];
  return {
          wrapStepReq: wrapStepReq,
          getOldReq: getOldReq,
          applyStepRes: applyStepRes,
          middlewares: middlewares
        };
}

exports.DefaultConfigurator = DefaultConfigurator;
exports.Make = Make;
/*  Not a pure module */
